<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 插件配置 -->
<plugins>
		<plugin interceptor="com.atguigu.mybatis.dao.MyFirstPlugs"></plugin>
</plugins>
<configuration>

<!-- 

1、使用properties标签将properties属性配置文件引入
	myBatis可以使用properties来引入外部properties配置文件的内容
	两个属性：resource:类路径下的资源
		   url:引入网络在线的路径资源或者磁盘路径下的资源
-->
<properties resource="dbconfig.properties"/>

<!-- 
2、settings:包含很多设置项信息
	setting:用来设置每一项的名称
		name:设项目名称
		value:设置取项值(true/false)
 -->
 <!-- 开启数据列表与bean实体不一致时，与类对应 。自动驼峰命名转换-->
 <settings>
 	<setting name="mapUnderscoreToCamelCase" value="true"/> 
 	<!-- 防止数据库不能插入Null,默认为other -->
 	<setting name="jdbcTypeForNull" value="NULL"/>
 	<!-- 延迟加载设置，为了防止版本更新，我们建议手动开启 -->
 	<!-- <setting name="lazyLoadingEnabled" value="true"/>
	<setting name="aggressiveLazyLoading" value="false"/>  -->
 </settings>
 
<!--
3、typeAliases：别名处理器，可以给我们Java类型起别名
		本名不区分大小写
  -->
 <typeAliases>
 <!-- 1、typeAlias：为某一个类型取别名 
 		type:要起的别名的全类名；默认类名别名为小写：employee
 		alias:指定新的别名
 -->
 	<!-- <typeAlias type="com.atguigu.mybatis.bean.Employee" alias="employee"/> -->
 	
 <!--  2、package:为某个包下的类起别名
 			name:指定包名（为当前包下面以及所有的后代包的每一个类都取别一个默认别名（默认类型都小写））
  -->	
 	<package name="com.atguigu.mybatis.bean"/>
 	
 <!--  3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 -->	
 	
 </typeAliases>
 
 
 <!-- 
 4、environments:环境们，mybatis可以配置多种环境，default表示使用哪一种环境，可以达到快速切换开发效果
    environment：配置一个具体环境信息，必须有两个标签，id为唯一标识
       transactionManager：事务管理器，type="[JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)]"
                 自定义事务管理器，实现TransactionFactory接口，type指定全类名
       
       dataSource:数据源
               type：UNPOOLED(UnpooledDataSourceFactory)
                    |POOLED(PooledDataSourceFactory)
                    |JNDI(JndiDataSourceFactory)
             自定义数据源：实现DataSourceFactory接口，type全类名
  -->
 
	<environments default="development">
	<!-- 开发 -->
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		
		<!-- 测试 -->
		<environment id="test">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 
	5、多数据库厂商驱动支持
		type="DB_VENDOR"：VendorDatabaseIdProvider
		 	作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server,xxxx
	 -->
	<databaseIdProvider type="DB_VENDOR">
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlServer"/>
	</databaseIdProvider>
	
	<!-- 将写好的SQL映射文件（EmployeeMapper.xml）注册到全局配置文件中（mybatis-config.xml） -->
	
	<!--mappers：将sql映射注册到全局配置中 -->
	
	 <mappers>
	 <!-- mapper:注册一个sql映射
	 		resource:类路径下的资源
	 		mybatis/mapper/EmployeeMapper.xml
	 		url:网络路径下的资源或者本地磁盘下的资源路径
	 		file:///var/mappers/AuthorMapper.xml
	 		注册接口：
	 		  	class:引用（注册）接口
	 		  	1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
				2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
	  -->
	 
		<!-- <mapper resource="mybatis/mapper/EmployeeMapper.xml" /> -->
		<!--映射文件与接口放在同一包下，并且只加载接口直接找到实体类  -->
		<!-- <mapper class="com.atguigu.mybatis.dao.EmployeeMapper"/> -->
		
		<!--采取在接口方法上使用mybatis的注解方式映射加载类sql语句，  -->
		<!-- <mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/> -->
		<!-- 批量注册（建议采用） -->
		<package name="com.atguigu.mybatis.dao"/>
		
	</mappers> 
	<!-- 包扫描的方式 -->
	<!-- <package name="com.atguigu.mybatis.dao"/>-->
</configuration>
