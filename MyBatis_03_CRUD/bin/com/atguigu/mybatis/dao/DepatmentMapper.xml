<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.atguigu.mybatis.dao.DepatmentMapper">
	
<resultMap type="com.atguigu.mybatis.bean.Department" id="MyDept">
	<id column="id" property="id"/>
	<result column="dept_name" property="deptName"/>
</resultMap>
	<!-- public Department getDeptById(Integer id); -->
	<select id="getDeptById" resultMap="MyDept">
		select * from tbl_dept where id = #{id}
	</select>
	
<resultMap type="com.atguigu.mybatis.bean.Department" id="MyDepeAndEmp">
	<id column="did" property="id"/>
	<result column="dept_name" property="deptName"/>
	
	<!-- 	使用collection的情况一般都是使用了集合容器
			collection定义关联集合类型的属性的封装规则
			ofType：指定集合里面元素类型
	 -->
	<collection property="empl" ofType="com.atguigu.mybatis.bean.Employee">
		<id column="id" property="id"/>
		<!-- 定义普通列封装规则 -->
		<result column="last_name" property="lastName"/>
		<!-- 其他列mybatis也会自动封装，只要写resultMap就把全部的映射规则都写上 -->
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
	</collection>
</resultMap>
	
	<!-- public Department getDeotByIds(Integer id); 
		使用部门查询员工	
	-->
	<select id="getDeotByIds" resultMap="MyDepeAndEmp">
		SELECT d.id did,d.dept_name dept_name,
	e.id eid,e.last_name last_name,e.gender gender,e.email email
 FROM tbl_dept d LEFT JOIN tbl_employee e ON d.id = e.d_id WHERE d.id=#{id}
	</select>
	
	
	<!--分步加载数据
		public Department getDeptEmpStep(Integer id);
	  -->
<resultMap type="com.atguigu.mybatis.bean.Department" id="MyDeptStep">
		<id column="id" property="id"/>
		<id column="dept_name" property="deptName"/>
		<collection property="empl" 
				select="com.atguigu.mybatis.dao.EmployeeMapperPlus.getDeptByIdStep"
				column="{deptId=id}"></collection>

</resultMap>	  
	  
	<select id="getDeptEmpStep" resultMap="MyDeptStep">
		select id,dept_name from tbl_dept where id = #{id}
	</select>
	
	<!--
		扩展：多列的值传递过去：
			将多列的值封装map传递；
			column="{key1=column1,key2=column2}"
		fetchType="lazy"：表示使用延迟加载；
				- lazy：延迟
				- eager：立即
	 -->
</mapper>